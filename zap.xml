<?xml version="1.0"?>
<OWASPZAPReport version="2.11.1" generated="Sun, 23 Jan 2022 23:09:56">
	
		<site name="https://demo.testfire.net" host="demo.testfire.net" port="443" ssl="true">
			<alerts>
				
					<alertitem>
						<pluginid>6</pluginid>
						<alertRef>6</alertRef>
						<alert>Path Traversal</alert>
						<name>Path Traversal</name>
						<riskcode>3</riskcode>
						<confidence>2</confidence>
						<riskdesc>High (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Most web sites restrict user access to a specific portion of the file-system, typically called the &quot;web document root&quot; or &quot;CGI root&quot; directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The most basic Path Traversal attack uses the &quot;../&quot; special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the &quot;../&quot; sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (&quot;..%u2216&quot; or &quot;..%c0%af&quot;) of the forward slash character, backslash characters (&quot;..\&quot;) on Windows-based servers, URL encoded characters &quot;%2e%2e%2f&quot;), and double URL encoding (&quot;..%255c&quot;) of the backslash character.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application&apos;s dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (&quot;.&quot;) to reveal the listing of the current working directory, or &quot;%00&quot; NULL characters in order to bypass rudimentary file extension checks.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=..%2FWEB-INF%2Fweb.xml</uri>
									<method>GET</method>
									<param>content</param>
									<attack>../WEB-INF/web.xml</attack>
									<evidence>&lt;/web-app&gt;</evidence>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;Assume all input is malicious. Use an &quot;accept known good&quot; input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, &quot;boat&quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as &quot;red&quot; or &quot;blue.&quot;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single &quot;.&quot; character in the filename to avoid weaknesses, and exclude directory separators such as &quot;/&quot;. Use an allow list of allowable file extensions.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as &apos;.&apos; and &apos;;&apos; which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into &quot;cleaning&quot; data into a dangerous form. Suppose the attacker injects a &apos;.&apos; inside a filename (e.g. &quot;sensi.tiveFile&quot;) and the sanitizing mechanism removes the character resulting in the valid filename, &quot;sensitiveFile&quot;. If the input data are now assumed to be safe, then the file may be compromised. &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Inputs should be decoded and canonicalized to the application&apos;s current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes &quot;..&quot; sequences and symbolic links.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Run your code in a &quot;jail&quot; or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;Check 4&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;http://projects.webappsec.org/Path-Traversal&lt;/p&gt;&lt;p&gt;http://cwe.mitre.org/data/definitions/22.html&lt;/p&gt;</reference>
						<cweid>22</cweid>
						<wascid>33</wascid>
						<sourceid>72</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10020</pluginid>
						<alertRef>10020</alertRef>
						<alert>X-Frame-Options Header Not Set</alert>
						<name>X-Frame-Options Header Not Set</name>
						<riskcode>2</riskcode>
						<confidence>2</confidence>
						<riskdesc>Medium (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;X-Frame-Options header is not included in the HTTP response to protect against &apos;ClickJacking&apos; attacks.&lt;/p&gt;</desc>
						<instances>
							<instance>
								<uri>https://demo.testfire.net/index.jsp?content=aaaaa%3C%3E%22%27%3Cscript%3Eaaa</uri>
								<method>GET</method>
								<param>X-Frame-Options</param>
								<attack></attack>
								<evidence></evidence>
							</instance>
							<instance>
								<uri>https://demo.testfire.net/index.jsp?content=personal_deposit.htm</uri>
								<method>GET</method>
								<param>X-Frame-Options</param>
								<attack></attack>
								<evidence></evidence>
							</instance>
							<instance>
								<uri>https://demo.testfire.net/login.jsp</uri>
								<method>GET</method>
								<param>X-Frame-Options</param>
								<attack></attack>
								<evidence></evidence>
							</instance>
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it&apos;s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it&apos;s part of a FRAMESET) then you&apos;ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy&apos;s &quot;frame-ancestors&quot; directive. &lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options&lt;/p&gt;</reference>
						<cweid>1021</cweid>
						<wascid>15</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10202</pluginid>
						<alertRef>10202</alertRef>
						<alert>Absence of Anti-CSRF Tokens</alert>
						<name>Absence of Anti-CSRF Tokens</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;No Anti-CSRF tokens were found in a HTML submission form.&lt;/p&gt;&lt;p&gt;A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;CSRF attacks are effective in a number of situations, including:&lt;/p&gt;&lt;p&gt;    * The victim has an active session on the target site.&lt;/p&gt;&lt;p&gt;    * The victim is authenticated via HTTP auth on the target site.&lt;/p&gt;&lt;p&gt;    * The victim is on the same local network as the target site.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;CSRF has primarily been used to perform an action against a target site using the victim&apos;s privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=aaaaa%3C%3E%22%27%3Cscript%3Eaaa</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;form id=&quot;frmSearch&quot; method=&quot;get&quot; action=&quot;/search.jsp&quot;&gt;</evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=personal_deposit.htm</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;form id=&quot;frmSearch&quot; method=&quot;get&quot; action=&quot;/search.jsp&quot;&gt;</evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/login.jsp</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;form id=&quot;frmSearch&quot; method=&quot;get&quot; action=&quot;/search.jsp&quot;&gt;</evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/login.jsp</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;form action=&quot;doLogin&quot; method=&quot;post&quot; name=&quot;login&quot; id=&quot;login&quot; onsubmit=&quot;return (confirminput(login));&quot;&gt;</evidence>
								</instance>
							
						</instances>
						<count>4</count>
						<solution>&lt;p&gt;Phase: Architecture and Design&lt;/p&gt;&lt;p&gt;Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.&lt;/p&gt;&lt;p&gt;For example, use anti-CSRF packages such as the OWASP CSRFGuard.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Implementation&lt;/p&gt;&lt;p&gt;Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Architecture and Design&lt;/p&gt;&lt;p&gt;Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).&lt;/p&gt;&lt;p&gt;Note that this can be bypassed using XSS.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.&lt;/p&gt;&lt;p&gt;Note that this can be bypassed using XSS.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Use the ESAPI Session Management control.&lt;/p&gt;&lt;p&gt;This control includes a component for CSRF.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Do not use the GET method for any request that triggers a state change.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Implementation&lt;/p&gt;&lt;p&gt;Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: &quot;query&quot; ].&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;http://projects.webappsec.org/Cross-Site-Request-Forgery&lt;/p&gt;&lt;p&gt;http://cwe.mitre.org/data/definitions/352.html&lt;/p&gt;</reference>
						<cweid>352</cweid>
						<wascid>9</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10038</pluginid>
						<alertRef>10038</alertRef>
						<alert>Content Security Policy (CSP) Header Not Set</alert>
						<name>Content Security Policy (CSP) Header Not Set</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page &#x2014; covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=aaaaa%3C%3E%22%27%3Cscript%3Eaaa</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=personal_deposit.htm</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/login.jsp</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header, to achieve optimal browser support: &quot;Content-Security-Policy&quot; for Chrome 25+, Firefox 23+ and Safari 7+, &quot;X-Content-Security-Policy&quot; for Firefox 4.0+ and Internet Explorer 10+, and &quot;X-WebKit-CSP&quot; for Chrome 14+ and Safari 6+.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy&lt;/p&gt;&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html&lt;/p&gt;&lt;p&gt;http://www.w3.org/TR/CSP/&lt;/p&gt;&lt;p&gt;http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html&lt;/p&gt;&lt;p&gt;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&lt;/p&gt;&lt;p&gt;http://caniuse.com/#feat=contentsecuritypolicy&lt;/p&gt;&lt;p&gt;http://content-security-policy.com/&lt;/p&gt;</reference>
						<cweid>16</cweid>
						<wascid>15</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10010</pluginid>
						<alertRef>10010</alertRef>
						<alert>Cookie No HttpOnly Flag</alert>
						<name>Cookie No HttpOnly Flag</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://demo.testfire.net/doLogin</uri>
									<method>POST</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;Ensure that the HttpOnly flag is set for all cookies.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://owasp.org/www-community/HttpOnly&lt;/p&gt;</reference>
						<cweid>1004</cweid>
						<wascid>13</wascid>
						<sourceid>14</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10011</pluginid>
						<alertRef>10011</alertRef>
						<alert>Cookie Without Secure Flag</alert>
						<name>Cookie Without Secure Flag</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://demo.testfire.net/doLogin</uri>
									<method>POST</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html&lt;/p&gt;</reference>
						<cweid>614</cweid>
						<wascid>13</wascid>
						<sourceid>14</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10054</pluginid>
						<alertRef>10054</alertRef>
						<alert>Cookie without SameSite Attribute</alert>
						<name>Cookie without SameSite Attribute</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a &apos;cross-site&apos; request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://demo.testfire.net/bank/main.jsp</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>Set-Cookie: JSESSIONID</evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=aaaaa%3C%3E%22%27%3Cscript%3Eaaa</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>Set-Cookie: JSESSIONID</evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=personal_deposit.htm</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>Set-Cookie: JSESSIONID</evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/login.jsp</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>Set-Cookie: JSESSIONID</evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/doLogin</uri>
									<method>POST</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/doLogin</uri>
									<method>POST</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>Set-Cookie: JSESSIONID</evidence>
								</instance>
							
						</instances>
						<count>6</count>
						<solution>&lt;p&gt;Ensure that the SameSite attribute is set to either &apos;lax&apos; or ideally &apos;strict&apos; for all cookies.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site&lt;/p&gt;</reference>
						<cweid>1275</cweid>
						<wascid>13</wascid>
						<sourceid>15</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10063</pluginid>
						<alertRef>10063</alertRef>
						<alert>Feature Policy Header Not Set</alert>
						<name>Feature Policy Header Not Set</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;Feature Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Feature Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=aaaaa%3C%3E%22%27%3Cscript%3Eaaa</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=personal_deposit.htm</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/login.jsp</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is configured to set the Feature-Policy header.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy&lt;/p&gt;&lt;p&gt;https://developers.google.com/web/updates/2018/06/feature-policy&lt;/p&gt;&lt;p&gt;https://scotthelme.co.uk/a-new-security-header-feature-policy/&lt;/p&gt;&lt;p&gt;https://w3c.github.io/webappsec-feature-policy/&lt;/p&gt;&lt;p&gt;https://www.smashingmagazine.com/2018/12/feature-policy/&lt;/p&gt;</reference>
						<cweid>16</cweid>
						<wascid>15</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10015</pluginid>
						<alertRef>10015</alertRef>
						<alert>Incomplete or No Cache-control Header Set</alert>
						<name>Incomplete or No Cache-control Header Set</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=aaaaa%3C%3E%22%27%3Cscript%3Eaaa</uri>
									<method>GET</method>
									<param>Cache-Control</param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=personal_deposit.htm</uri>
									<method>GET</method>
									<param>Cache-Control</param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/login.jsp</uri>
									<method>GET</method>
									<param>Cache-Control</param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching&lt;/p&gt;&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control&lt;/p&gt;</reference>
						<cweid>525</cweid>
						<wascid>13</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10036</pluginid>
						<alertRef>10036</alertRef>
						<alert>Server Leaks Version Information via &quot;Server&quot; HTTP Response Header Field</alert>
						<name>Server Leaks Version Information via &quot;Server&quot; HTTP Response Header Field</name>
						<riskcode>1</riskcode>
						<confidence>3</confidence>
						<riskdesc>Low (High)</riskdesc>
						<confidencedesc>High</confidencedesc>
						<desc>&lt;p&gt;The web/application server is leaking version information via the &quot;Server&quot; HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://demo.testfire.net/bank/main.jsp</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Apache-Coyote/1.1</evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=aaaaa%3C%3E%22%27%3Cscript%3Eaaa</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Apache-Coyote/1.1</evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=personal_deposit.htm</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Apache-Coyote/1.1</evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/login.jsp</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Apache-Coyote/1.1</evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/style.css</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Apache-Coyote/1.1</evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/doLogin</uri>
									<method>POST</method>
									<param></param>
									<attack></attack>
									<evidence>Apache-Coyote/1.1</evidence>
								</instance>
							
						</instances>
						<count>6</count>
						<solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is configured to suppress the &quot;Server&quot; header or provide generic details.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;http://httpd.apache.org/docs/current/mod/core.html#servertokens&lt;/p&gt;&lt;p&gt;http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007&lt;/p&gt;&lt;p&gt;http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx&lt;/p&gt;&lt;p&gt;http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html&lt;/p&gt;</reference>
						<cweid>200</cweid>
						<wascid>13</wascid>
						<sourceid>15</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10035</pluginid>
						<alertRef>10035</alertRef>
						<alert>Strict-Transport-Security Header Not Set</alert>
						<name>Strict-Transport-Security Header Not Set</name>
						<riskcode>1</riskcode>
						<confidence>3</confidence>
						<riskdesc>Low (High)</riskdesc>
						<confidencedesc>High</confidencedesc>
						<desc>&lt;p&gt;HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=aaaaa%3C%3E%22%27%3Cscript%3Eaaa</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=personal_deposit.htm</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/login.jsp</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/style.css</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
						</instances>
						<count>4</count>
						<solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html&lt;/p&gt;&lt;p&gt;https://owasp.org/www-community/Security_Headers&lt;/p&gt;&lt;p&gt;http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security&lt;/p&gt;&lt;p&gt;http://caniuse.com/stricttransportsecurity&lt;/p&gt;&lt;p&gt;http://tools.ietf.org/html/rfc6797&lt;/p&gt;</reference>
						<cweid>16</cweid>
						<wascid>15</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10021</pluginid>
						<alertRef>10021</alertRef>
						<alert>X-Content-Type-Options Header Missing</alert>
						<name>X-Content-Type-Options Header Missing</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The Anti-MIME-Sniffing header X-Content-Type-Options was not set to &apos;nosniff&apos;. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=aaaaa%3C%3E%22%27%3Cscript%3Eaaa</uri>
									<method>GET</method>
									<param>X-Content-Type-Options</param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=personal_deposit.htm</uri>
									<method>GET</method>
									<param>X-Content-Type-Options</param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/login.jsp</uri>
									<method>GET</method>
									<param>X-Content-Type-Options</param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/style.css</uri>
									<method>GET</method>
									<param>X-Content-Type-Options</param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
						</instances>
						<count>4</count>
						<solution>&lt;p&gt;Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to &apos;nosniff&apos; for all web pages.&lt;/p&gt;&lt;p&gt;If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.&lt;/p&gt;&lt;p&gt;At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx&lt;/p&gt;&lt;p&gt;https://owasp.org/www-community/Security_Headers&lt;/p&gt;</reference>
						<cweid>693</cweid>
						<wascid>15</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10027</pluginid>
						<alertRef>10027</alertRef>
						<alert>Information Disclosure - Suspicious Comments</alert>
						<name>Information Disclosure - Suspicious Comments</name>
						<riskcode>0</riskcode>
						<confidence>1</confidence>
						<riskdesc>Informational (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://demo.testfire.net/login.jsp</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>username</evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/login.jsp</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>admin</evidence>
								</instance>
							
						</instances>
						<count>2</count>
						<solution>&lt;p&gt;Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;The following pattern was used: \bUSERNAME\b and was detected in the element starting with: &quot;&lt;script type=&quot;text/javascript&quot;&gt;&lt;/p&gt;&lt;p&gt;			function setfocus() {&lt;/p&gt;&lt;p&gt;			    if (document.login.uid.value==&quot;&quot;) {&lt;/p&gt;&lt;p&gt;			      	document.login.&quot;, see evidence field for the suspicious comment/snippet.&lt;/p&gt;</otherinfo>
						<reference></reference>
						<cweid>200</cweid>
						<wascid>13</wascid>
						<sourceid>11</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10049</pluginid>
						<alertRef>10049</alertRef>
						<alert>Non-Storable Content</alert>
						<name>Non-Storable Content</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The response contents are not storable by caching components such as proxy servers. If the response does not contain sensitive, personal or user-specific information, it may benefit from being stored and cached, to improve performance.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://demo.testfire.net/bank/main.jsp</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>302</evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/doLogin</uri>
									<method>POST</method>
									<param></param>
									<attack></attack>
									<evidence>302</evidence>
								</instance>
							
						</instances>
						<count>2</count>
						<solution>&lt;p&gt;The content may be marked as storable by ensuring that the following conditions are satisfied:&lt;/p&gt;&lt;p&gt;The request method must be understood by the cache and defined as being cacheable (&quot;GET&quot;, &quot;HEAD&quot;, and &quot;POST&quot; are currently defined as cacheable)&lt;/p&gt;&lt;p&gt;The response status code must be understood by the cache (one of the 1XX, 2XX, 3XX, 4XX, or 5XX response classes are generally understood)&lt;/p&gt;&lt;p&gt;The &quot;no-store&quot; cache directive must not appear in the request or response header fields&lt;/p&gt;&lt;p&gt;For caching by &quot;shared&quot; caches such as &quot;proxy&quot; caches, the &quot;private&quot; response directive must not appear in the response&lt;/p&gt;&lt;p&gt;For caching by &quot;shared&quot; caches such as &quot;proxy&quot; caches, the &quot;Authorization&quot; header field must not appear in the request, unless the response explicitly allows it (using one of the &quot;must-revalidate&quot;, &quot;public&quot;, or &quot;s-maxage&quot; Cache-Control response directives)&lt;/p&gt;&lt;p&gt;In addition to the conditions above, at least one of the following conditions must also be satisfied by the response:&lt;/p&gt;&lt;p&gt;It must contain an &quot;Expires&quot; header field&lt;/p&gt;&lt;p&gt;It must contain a &quot;max-age&quot; response directive&lt;/p&gt;&lt;p&gt;For &quot;shared&quot; caches such as &quot;proxy&quot; caches, it must contain a &quot;s-maxage&quot; response directive&lt;/p&gt;&lt;p&gt;It must contain a &quot;Cache Control Extension&quot; that allows it to be cached&lt;/p&gt;&lt;p&gt;It must have a status code that is defined as cacheable by default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).   &lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://tools.ietf.org/html/rfc7234&lt;/p&gt;&lt;p&gt;https://tools.ietf.org/html/rfc7231&lt;/p&gt;&lt;p&gt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)&lt;/p&gt;</reference>
						<cweid>524</cweid>
						<wascid>13</wascid>
						<sourceid>15</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10049</pluginid>
						<alertRef>10049</alertRef>
						<alert>Storable and Cacheable Content</alert>
						<name>Storable and Cacheable Content</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where &quot;shared&quot; caching servers such as &quot;proxy&quot; caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=aaaaa%3C%3E%22%27%3Cscript%3Eaaa</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/index.jsp?content=personal_deposit.htm</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/login.jsp</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>https://demo.testfire.net/style.css</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
						</instances>
						<count>4</count>
						<solution>&lt;p&gt;Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:&lt;/p&gt;&lt;p&gt;Cache-Control: no-cache, no-store, must-revalidate, private&lt;/p&gt;&lt;p&gt;Pragma: no-cache&lt;/p&gt;&lt;p&gt;Expires: 0&lt;/p&gt;&lt;p&gt;This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. &lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://tools.ietf.org/html/rfc7234&lt;/p&gt;&lt;p&gt;https://tools.ietf.org/html/rfc7231&lt;/p&gt;&lt;p&gt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)&lt;/p&gt;</reference>
						<cweid>524</cweid>
						<wascid>13</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
			</alerts>
		</site>
	
</OWASPZAPReport>
